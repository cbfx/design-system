//
// FORM > RADIO
//
// properties within each class are sorted alphabetically
//

@use '../../mixins/focus-ring' as *;

$hds-form-radio-control-size: 16px;

.hds-form-radio {
  display: flex;
  align-items: start;
}

.hds-form-radio__control-wrapper {
  flex: none;
}

.hds-form-radio__text-wrapper {
  flex: 1 0 auto;
  margin-left: 0.5rem;
}

// STANDALONE CONTROL

.hds-form-radio-standalone {
  position: relative;
  isolation: isolate; // used to create a new stacking context
}

// control (hidden)

.hds-form-radio-standalone__control {
  position: absolute;
  z-index: 1;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: block;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  outline: none;
  border: none;
  background-color: transparent;
  color: transparent;
  opacity: 0;
  appearance: none;
  cursor: pointer;
}

// facade (visible)

.hds-form-radio-standalone__facade {
  border-radius: 50%;
  border-style: solid;
  border-width: 1px;
  display: block;
  height: $hds-form-radio-control-size;
  position: relative;
  width: $hds-form-radio-control-size;

  // used for the dot
  &::after {
    display: none;
    background-color: currentColor;
    border-radius: 50%;
    width: 5px;
    height: 5px;
    bottom: 0;
    content: '';
    left: 0;
    margin: auto;
    position: absolute;
    right: 0;
    top: 0;
  }

  // used for the focus

  &::before {
    $border-width: 2px;
    $shift: $border-width + 1px; // we need to take in account also the border width of the parent
    border-radius: 50%;
    border-width: $border-width;
    bottom: -$shift;
    content: '';
    left: -$shift;
    margin: auto;
    position: absolute;
    right: -$shift;
    top: -$shift;
  }

  // STATUS

  // base (default)

  :not(:checked) + & {
    background-color: var(--token-color-surface-primary);
    border-color: var(--token-color-border-primary);
    box-shadow: var(--hds-elevation-inset-box-shadow);
  }
  :checked + & {
    background-color: var(--token-color-palette-blue-200);
    border-color: var(--token-color-palette-blue-400);
    color: var(--token-color-foreground-high-contrast);

    &::after {
      display: block;
    }
  }

  // hover

  :hover:not(:checked) + &,
  .mock-hover:not(:checked) + & {
    border-color: var(--token-color-border-strong);
  }
  :hover:checked + &,
  .mock-hover:checked + & {
    background-color: var(--token-color-foreground-action-hover);
    border-color: var(--token-color-palette-blue-500);
  }

  // focus (same for all the states)

  :focus + &,
  .mock-focus + & {
    border-color: var(--token-color-palette-blue-400);

    &::before {
      border-style: solid;
      border-color: var(--token-color-focus-action-external);
    }
  }

  // active

  :active:not(:checked) + &,
  .mock-active:not(:checked) + & {
    border-color: var(--token-color-palette-blue-400);
  }
  :active:checked + &,
  .mock-active:checked + & {
    background-color: var(--token-color-foreground-action-active);
    border-color: var(--token-color-palette-blue-500);
  }

  // INVALID

  // TODO add handling of invalid state via a custom class
  // TODO would make sense to use `:invalid` here? what would be the benefits?
  .mock-invalid:not(:checked) + & {
    border-color: var(--token-color-foreground-critical);
  }
  .mock-invalid:checked + & {
    background-color: var(--token-color-surface-critical);
    border-color: var(--token-color-foreground-critical);
    color: var(--token-color-foreground-critical);
  }

  // DISABLED

  // TODO would make sense to use `:disabled` here? what would be the benefits?
  [disabled]:not(:checked) + &,
  [disabled]:checked + & {
    background-color: var(--token-color-surface-strong);
    border-color: var(--token-color-border-primary);
    box-shadow: none;
    color: var(--token-color-foreground-faint);
  }
}

// #####################################################################
// #####################################################################
// #####################################################################
// #####################################################################

// TEST USING NATIVE STYLING

.hds-form-radio--use-native {
  .hds-form-radio-standalone__facade {
    display: none;
  }

  .hds-form-radio-standalone__native {
    appearance: none;
    cursor: pointer;
    border-radius: 50%;
    border-style: solid;
    border-width: 1px;
    display: block;
    height: $hds-form-radio-control-size;
    position: relative;
    width: $hds-form-radio-control-size;

    // used for the dot
    &::after {
      display: none;
      background-color: currentColor;
      border-radius: 50%;
      width: 5px;
      height: 5px;
      bottom: 0;
      content: '';
      left: 0;
      margin: auto;
      position: absolute;
      right: 0;
      top: 0;
    }

    // used for the focus

    // &::before {
    //   $border-width: 2px;
    //   $shift: $border-width + 1px; // we need to take in account also the border width of the parent
    //   border-radius: 50%;
    //   border-width: $border-width;
    //   bottom: -$shift;
    //   content: '';
    //   left: -$shift;
    //   margin: auto;
    //   position: absolute;
    //   right: -$shift;
    //   top: -$shift;
    // }

    // STATUS

    // base (default)

    &:not(:checked) {
      background-color: var(--token-color-surface-primary);
      border-color: var(--token-color-border-primary);
      box-shadow: var(--hds-elevation-inset-box-shadow);
    }
    &:checked {
      background-color: var(--token-color-palette-blue-200);
      border-color: var(--token-color-palette-blue-400);
      color: var(--token-color-foreground-high-contrast);

      &::after {
        display: block;
      }
    }

    // hover

    &:hover:not(:checked),
    &.mock-hover:not(:checked) {
      border-color: var(--token-color-border-strong);
    }
    &:hover:checked,
    &.mock-hover:checked {
      background-color: var(--token-color-foreground-action-hover);
      border-color: var(--token-color-palette-blue-500);
    }

    // focus (same for all the states)

    &:focus,
    &.mock-focus {
      border-color: var(--token-color-palette-blue-400);

      &::before {
        border-style: solid;
        border-color: var(--token-color-focus-action-external);
      }
    }

    // active

    &:active:not(:checked),
    &.mock-active:not(:checked) {
      border-color: var(--token-color-palette-blue-400);
    }
    &:active:checked,
    &.mock-active:checked {
      background-color: var(--token-color-foreground-action-active);
      border-color: var(--token-color-palette-blue-500);
    }

    // INVALID

    // TODO add handling of invalid state via a custom class
    // TODO would make sense to use `:invalid` here? what would be the benefits?
    &.mock-invalid:not(:checked) {
      border-color: var(--token-color-foreground-critical);
    }
    &.mock-invalid:checked {
      background-color: var(--token-color-surface-critical);
      border-color: var(--token-color-foreground-critical);
      color: var(--token-color-foreground-critical);
    }

    // DISABLED

    // TODO would make sense to use `:disabled` here? what would be the benefits?
    &[disabled]:not(:checked),
    &[disabled]:checked {
      background-color: var(--token-color-surface-strong);
      border-color: var(--token-color-border-primary);
      box-shadow: none;
      color: var(--token-color-foreground-faint);
    }
  }
}
