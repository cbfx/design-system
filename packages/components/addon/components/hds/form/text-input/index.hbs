{{! STRUCTURE
  - https://github.com/hashicorp/structure/blob/dffbb0e0ae5246d3b832586ab25bcb981a052b30/packages/pds-ember/addon/components/pds/input/utils.js#L3-L25
    - They have multiple types of inputs, mapped to a "text-like" input or not
      - button: { like: 'button' },
      - checkbox: { like: 'checkbox' },
      - color: { like: 'color' },
      - date: { like: 'text' },
      - datetime: { like: 'text', obsolete: true },
      - 'datetime-local': { like: 'text' },
      - email: { like: 'text' },
      - file: { like: 'file' },
      - month: { like: 'text' },
      - number: { like: 'text' },
      - password: { like: 'text' },
      - radio: { like: 'radio' },
      - range: { like: 'range' },
      - reset: { like: 'button' },
      - search: { like: 'text' },
      - submit: { like: 'button' },
      - tel: { like: 'text' },
      - text: { like: 'text' },
      - time: { like: 'text' },
      - url: { like: 'text' },
      - week: { like: 'text' },
  - https://github.com/hashicorp/structure/blob/main/packages/pds-ember/addon/components/pds/input/index.js
    - they have these extra arguments
      - @invalid (according to the comments, applies an "invalid" appearance but does _not_ modify logical validity (i.e., `:valid` or `:invalid`))
    - they have two tracked properties "dirty" and "touched", that get set to true on "onBlur"
      - these are mapped to HTML attributes "pds-dirty" and "pds-touched" (see below)
  - https://github.com/hashicorp/structure/blob/main/packages/pds-ember/addon/components/pds/input/index.hbs
    - they have these extra props
      - pds-dirty=\{\{this.dirty\}\}
      - pds-touched=\{\{this.touched\}\}
      - \{\{on 'blur' this.onBlur once=true passive=true\}\}
  - For more details about validation in PDS/Structure see:
    - https://structure.hashicorp.vercel.app/?path=/story/guides-forms-validation--page
    - notice these dirty/touched validation are applied only to `text input` + `select` + `textarea`
}}
{{! CONSUL
  - doc page: https://github.com/hashicorp/consul/tree/main/ui/packages/consul-ui/app/components/text-input
  - https://github.com/hashicorp/consul/blob/main/ui/packages/consul-ui/app/components/form-input/index.hbs
   - this contains the label, the "input" yielding, the helper text and the error text all in the same component
   - they are named blocks, so technically the "form-input" is a layout element, more of a generic container, than an "input" component
  - https://github.com/hashicorp/consul/blob/main/ui/packages/consul-ui/app/components/text-input/index.hbs
    - this is the actual "text-input" component
      - the "input" exposes
        - an "onInput" callback
        - there is a "validate" modifier (see https://github.com/hashicorp/consul/blob/main/ui/packages/consul-ui/app/components/modifiers/validate.mdx)
      - it has @label, @name, @placeholder, @help
}}
{{! BOUNDARY/ROSE
  - doc page: https://boundary-ui-storybook.vercel.app/?path=/story/rose-form-input--basic-field
  - they have an interesting organization/architecture of code:
    - https://github.com/hashicorp/boundary-ui/blob/main/addons/rose/addon/components/rose/form/input/index.hbs
      - they use a @contextual argument to allow consumers to use a contentual component syntax for the input (see https://github.com/hashicorp/boundary-ui/blame/main/addons/rose/addon/components/rose/form/input/index.stories.mdx#L141-L153)
      - the component exposes the following props
        - @type
        - @name
        - @value
        - @label
        - @helperText
        - @link + @linkText
        - @error
        - @disabled
        - @icon (always leading)
        - readonly (attr)
        - generates a UID internally (in JS backing class) used for "ID", "for", "aria-describedby"
    - https://github.com/hashicorp/boundary-ui/blob/main/addons/rose/addon/components/rose/form/input/input/index.hbs
      - this is the "pure" input, and is located in a sub-folder (with same name as component, same for select or textarea)
      - interestingly enough, they expose
        - @aria-describedby (to be understood why is needed)
}}
{{! ATLAS/TERRAFORM
  - https://github.com/hashicorp/atlas/tree/main/frontend
    - they're using native HTML <input>/<label> elements, no components
    - the styling is done via specific classes (see https://github.com/hashicorp/atlas/blob/main/frontend/atlas/app/styles/core/_form.scss)
}}
{{! WAYPOINT
  - https://github.com/hashicorp/waypoint/tree/main/ui
    - they're using native HTML <input>/<label> elements, no components
    - they have only 5/6 cases, and they're styled in the context of where they're used (not globally)
}}
{{! EMBER-EUI
  - doc page: https://ember-eui.netlify.app/docs/core/docs/forms/form-controls/text-field
  - doc page: https://elastic.github.io/eui/#/forms/form-controls#text-field
  - https://github.com/prysmex/ember-eui/blob/master/packages/core/addon/components/eui-field-text/index.hbs
    - they use a @controlOnly argument to allow consumers to generate just the simple "input", instead of the whole "field" (using the FormControlLayout, see below)
    - the text field exposes these extra properties:
      - fullWidth
      - loading (the leading/trailing icon is a loading icon)
      - prepend/append (named blocks?)
    - internally it uses the FormControlLayout
      - https://github.com/prysmex/ember-eui/blob/master/packages/core/addon/components/eui-form-control-layout/index.hbs
        - it's the responsible for the prepend/append
}}
<input
    type={{this.type}}
    value={{@value}}
    className={{this.classNames}}
    ...attributes
/>