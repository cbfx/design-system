{{page-title "Form / Base elements"}}

<h2 class="dummy-h2">Form / Base elements</h2>

<section>
  <h3 class="dummy-h3" id="overview"><a href="#overview">Â§</a> Overview</h3>
  <p class="dummy-paragraph">In this page we collect a few "base" elements that are used to build/compose the "form"
    fields. They can also be used to build custom fields (in very specific cases).</p>
  <ul>
    <li class="dummy-paragraph">
      <code class="dummy-code">Form::Label</code>
      is the label associated with the form control
    </li>
    <li class="dummy-paragraph">
      <code class="dummy-code">Form::HelperText</code>
      is an optional extra text used to help the user understand what the field is intended for
    </li>
    <li class="dummy-paragraph">
      <code class="dummy-code">Form::Error</code>
      is the error message shown to the user in case of failed validation of the field
    </li>
  </ul>
</section>

<section>
  <h3 class="dummy-h3" id="component-api"><a href="#component-api">Â§</a> Component API</h3>

  <h4 class="dummy-h4">Form::Label</h4>
  <p class="dummy-paragraph" id="component-api-form-label">
    Here is the API for the component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-label">
    <dt>fieldId <code>string</code></dt>
    <dd>
      <p>The ID of the form control associated with the label. This is used to populate the
        <code class="dummy-code">for</code>
        attribute of the
        <code class="dummy-code">&lt;label&gt;</code>
        element.</p>
    </dd>
    <dt>"yield"</dt>
    <dd>
      <p>Elements passed as children of this component are yielded inside the
        <code class="dummy-code">&lt;label&gt;</code>
        element.</p>
    </dd>
    <dt>...attributes</dt>
    <dd>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
    </dd>
  </dl>

  <h4 class="dummy-h4">Form::HelperText</h4>
  <p class="dummy-paragraph" id="component-api-form-helper-text">
    Here is the API for the component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-helper-text">
    <dt>fieldId <code>string</code></dt>
    <dd>
      <p>The ID of the form control associated with the helper text. This is used to populate the
        <code class="dummy-code">id</code>
        HTML attribute (with a
        <code class="dummy-code">helper-text-</code>
        prefix) of the element. This HelperText ID can then be referenced in the
        <code class="dummy-code">aria-describedby</code>
        attribute of the form control.</p>
    </dd>
    <dt>"yield"</dt>
    <dd>
      <p>Elements passed as children of this component are yielded inside the element.</p>
    </dd>
    <dt>...attributes</dt>
    <dd>
      <p><code class="dummy-code">...attributes</code> spreading is supported on this component.</p>
    </dd>
  </dl>

  <h4 class="dummy-h4">Form::Error</h4>
  <p class="dummy-paragraph" id="component-api-form-helper-error">
    Here is the API for the component:
  </p>
  <dl class="dummy-component-props" aria-labelledby="component-api-form-error">
    <dl>ðŸš§ TODO ðŸš§</dl>
  </dl>

</section>

<section>
  <h3 class="dummy-h3" id="how-to-use"><a href="#how-to-use" class="dummy-link-section">Â§</a> How to use</h3>

  <h4 class="dummy-h4">Form::Label</h4>
  <p class="dummy-paragraph">
    The most basic invocation just needs a text passed to the component and a
    <code class="dummy-code">fieldId</code>
    argument (the ID of the form control associated with the label):
  </p>
  {{! prettier-ignore-start }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Label @fieldId="control-ID">My label</Hds::Form::Label>
    '
  />
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Label @fieldId="control-ID">My label</Hds::Form::Label>
  <p class="dummy-paragraph">
    There may be cases in which the label needs to contain more than just text. In this case it's possible to pass
    structured content to it (it's just yielded in output):
  </p>
  {{! prettier-ignore-start }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Label @fieldId="control-ID">
        <span>Some text</span>
        <Hds::Badge @size="small" @text="Some badge" />
      </Hds::Form::Label>
    '
  />
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Label @fieldId="control-ID">
    <span>Some text</span>
    <Hds::Badge @size="small" @text="Some badge" />
  </Hds::Form::Label>
  <p class="dummy-paragraph">
    <strong>Important:</strong>
    in this case, while the correct text styling is applied to the component's container, the layout/organization of the
    content inside the component is left to the consumer.</p>

  <h4 class="dummy-h4">Form::HelperText</h4>
  <p class="dummy-paragraph">
    The most basic invocation just needs a text passed to the component and a
    <code class="dummy-code">fieldId</code>
    argument:
  </p>
  {{! prettier-ignore-start }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::HelperText @fieldId="control-ID">This is some helper text</Hds::Form::HelperText>
    '
  />
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::HelperText @fieldId="control-ID">This is some helper text</Hds::Form::HelperText>
  <p class="dummy-paragraph"><em>Notice: the
      <code class="dummy-code">fieldId</code>
      value will be used to generate an ID, prefixed with
      <code class="dummy-code">helper-text-</code>, so that this ID can be referenced in the
      <code class="dummy-code">aria-describedby</code>
      attribute of the form control. If no
      <code class="dummy-code">fieldId</code>
      is provided, no ID is generated (but if needed it can be passed directly as HTML attribute).</em></p>
  <p class="dummy-paragraph">
    There may be cases in which the helper text needs to contain more than just text. In this case it's possible to pass
    structured content to it (it's just yielded in output):
  </p>
  {{! prettier-ignore-start }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::HelperText @fieldId="control-ID">
        Some text with a
        <Hds::Link::Inline @route="components.link.inline">Hds::Link::Inline</Hds::Link::Inline>,
        <code>some code</code> and a <strong>strong</strong>
      </Hds::Form::HelperText>
    '
  />
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::HelperText @fieldId="control-ID">
    Some text with a
    <Hds::Link::Inline @route="components.link.inline">Hds::Link::Inline</Hds::Link::Inline>,
    <code>some code</code>
    and a
    <strong>strong</strong>
  </Hds::Form::HelperText>
  <p class="dummy-paragraph">
    <strong>Important:</strong>
    in this case, while the correct text styling is applied to the component's container, the layout/organization of the
    content inside the component is left to the consumer.</p>

  <h4 class="dummy-h4">Form::Error</h4>
  <p class="dummy-paragraph">
    The most basic invocation just needs a text passed to the component and a
    <code class="dummy-code">fieldId</code>
    argument:
  </p>
  {{! prettier-ignore-start }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Error @fieldId="control-ID">This is a simple error message</Hds::Form::Error>
    '
  />
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Error @fieldId="control-ID">This is a simple error message</Hds::Form::Error>
  <p class="dummy-paragraph"><em>Notice: the
      <code class="dummy-code">fieldId</code>
      value will be used to generate an ID, prefixed with
      <code class="dummy-code">error-</code>, so that this ID can be referenced in the
      <code class="dummy-code">aria-describedby</code>
      attribute of the form control. If no
      <code class="dummy-code">fieldId</code>
      is provided, no ID is generated (but if needed it can be passed directly as HTML attribute).</em></p>
  <p class="dummy-paragraph">
    There may be cases in which the error is made of multiple messages. In this case it's possible to iterate over an
    collection of error messages:
  </p>
  {{! prettier-ignore-start }}
  {{! template-lint-disable no-unbalanced-curlies }}
  <CodeBlock
    @language="markup"
    @code='
      <Hds::Form::Error @fieldId="control-ID" as |error|>
        \{{#each @model.SAMPLE_ERROR_MESSAGES as |message|}}
          <error.message>\{{message}}</error.message>
        \{{/each}}
      </Hds::Form::Error>
    '
  />
  {{! template-lint-enable no-unbalanced-curlies }}
  {{! prettier-ignore-end }}
  <p class="dummy-paragraph">Renders to:</p>
  <Hds::Form::Error @fieldId="control-ID" as |error|>
    {{#each @model.SAMPLE_ERROR_MESSAGES as |message|}}
      <error.message>{{message}}</error.message>
    {{/each}}
  </Hds::Form::Error>

</section>

<section>
  <h3 class="dummy-h3" id="design-guidelines"><a href="#design-guidelines" class="dummy-link-section">Â§</a>
    Design guidelines</h3>
  <p class="dummy-paragraph">ðŸš§ TODO ðŸš§</p>
  {{! UNCOMMENT THIS BLOCK (once the link and/or the image are available) }}
  {{!
  <div class="dummy-design-guidelines">
    <p class="dummy-paragraph">
      <a href="[ADD THE LINK TO THE FIGMA FILE/PAGE HERE!]" target="_blank" rel="noopener noreferrer">Figma UI Kit</a>
    </p>
    <br />
    <img class="dummy-figma-docs" src="/assets/images/form-label-design-usage.png" alt="" role="none" />
  </div>
  }}
</section>

<section>
  <h3 class="dummy-h3" id="accessibility"><a href="#accessibility" class="dummy-link-section">Â§</a> Accessibility</h3>
  <p class="dummy-paragraph">ðŸš§ TODO ðŸš§</p>
</section>

<section data-test-percy>
  <h3 class="dummy-h3" id="showcase"><a href="#showcase" class="dummy-link-section">Â§</a> Showcase</h3>

  <h4 class="dummy-h4">Label</h4>
  <span class="dummy-text-small">With simple text</span>
  <Hds::Form::Label>This is a simple label </Hds::Form::Label>
  <br />
  <span class="dummy-text-small">With <code>&lt;Link::Inline&gt;</code></span>
  <Hds::Form::Label>This is a label <Hds::Link::Inline @route="index">with a link</Hds::Link::Inline></Hds::Form::Label>
  <br />
  <span class="dummy-text-small">With <code>&lt;Link::Inline&gt;</code> and <code>secondary</code> color</span>
  <Hds::Form::Label>This is a label
    <Hds::Link::Inline @route="index" @color="secondary">with a secondary link</Hds::Link::Inline></Hds::Form::Label>
  <br />
  <span class="dummy-text-small">With structured content (eg. a
    <code>flex</code>
    layout and a
    <code>&lt;Badge&gt;</code>)</span>
  <Hds::Form::Label>
    <div class="dummy-form-base-elements-label-with-badge">This is the label
      <Hds::Badge @size="small" @text="Some badge" /></div>
  </Hds::Form::Label>
  <br />
  <span class="dummy-text-small">With text that spans multiple lines</span>
  <div class="dummy-form-base-elements-max-width-sample">
    <Hds::Form::Label>This is a very long label text that should go on multiple lines</Hds::Form::Label>
  </div>

  <h4 class="dummy-h4">Helper text</h4>
  <span class="dummy-text-small">With simple text</span>
  <Hds::Form::HelperText>This is the helper text, usually used jointly with the label.</Hds::Form::HelperText>
  <br />
  <span class="dummy-text-small">With <code>&lt;Link::Inline&gt;</code></span>
  <Hds::Form::HelperText>This is a helper text with
    <Hds::Link::Inline @route="index">a primary link</Hds::Link::Inline>
    and then
    <Hds::Link::Inline @route="index" @color="secondary">a secondary link</Hds::Link::Inline>.</Hds::Form::HelperText>
  <br />
  <span class="dummy-text-small">With structured content (eg. distinct paragraphs)</span>
  <Hds::Form::HelperText>
    A helper text may contain some
    <code>&lt;code&gt;</code>
    for example, or a
    <strong>&lt;strong&gt;</strong>.
  </Hds::Form::HelperText>
  <br />
  <span class="dummy-text-small">With text that spans multiple lines</span>
  <div class="dummy-form-base-elements-max-width-sample">
    <Hds::Form::HelperText>This is a very long helper text that should go on multiple lines</Hds::Form::HelperText>
  </div>

  <h4 class="dummy-h4">Error</h4>
  <span class="dummy-text-small">With simple text</span>
  <Hds::Form::Error>This is a simple error message</Hds::Form::Error>
  <br />
  <span class="dummy-text-small">With text that spans multiple lines</span>
  <div class="dummy-form-base-elements-max-width-sample">
    <Hds::Form::Error>This is a very long error message that should span on multiple lines</Hds::Form::Error>
  </div>
  <br />
  <span class="dummy-text-small">With multiple error messages</span>
  <Hds::Form::Error as |error|>
    {{#each @model.SAMPLE_ERROR_MESSAGES as |message|}}
      <error.message>{{message}}</error.message>
    {{/each}}
  </Hds::Form::Error>

</section>